<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="writecontent">

	<select id="getContent" resultType="spring.model.ContentCommand">
		select * from contents order by conmodifieddate desc
	</select>

	<select id="getContentByHash" parameterType="String"
		resultType="spring.model.ContentCommand">
		select * from contents where conhash like '%' || #{hash} ||
		'%' order by conmodifieddate desc
	</select>

	<insert id="insertContent" parameterType="spring.model.ContentCommand">
		insert into contents
		values (connum_seq.nextval, #{content}, #{conhash}, #{concreateddate},
		#{conmodifieddate},#{conip},0,'0',#{email},#{connickname},0,#{latitude},#{longtitude},#{maptitle})
	</insert>

	<insert id="insertPhoto" parameterType="spring.model.PhotoCommand">
		insert into photo
		values(photo_seq.nextval, #{photoname},#{realpath},
		#{photosize},connum_seq.currval,#{email},#{serverpath})
	</insert>

	<select id="selectPhoto" parameterType="int"
		resultType="spring.model.PhotoCommand">
		select * from photo where connum=#{connum}
	</select>

	<select id="getContentone" parameterType="integer"
		resultType="spring.model.ContentCommand">
		select * from contents where connum = #{connum}
	</select>

	<delete id="deleteContent" parameterType="int">
		delete from contents where connum = #{connum}
	</delete>

	<update id="updateContent" parameterType="spring.model.ContentCommand">
		update contents set content=#{content}, conhash=#{conhash},latitude =#{latitude}, longtitude=#{longtitude}, maptitle = #{maptitle} where connum=#{connum}
	</update>
	<!-- 추가 -->
	<select id="myContent" parameterType="string"
		resultType="spring.model.ContentCommand">
		select * from contents where email =#{email} order by
		conmodifieddate desc
	</select>
	
	<select id="search" parameterType="String" resultType="spring.model.ContentCommand">
		select *
		from contents where content like '%' || #{searchname} || '%' 
		or connickname like '%' || #{searchname} || '%'
		or conhash like '%' || #{searchname} || '%' 
		or maptitle like '%' || #{searchname} || '%'
		order by
		conmodifieddate desc		
	</select>
	<!-- 해당날짜의  새로운 인기글 컬럼이 있는지 판단 -->
	<select id ="search_date" parameterType ="int" resultType="int">
		select count(*) from popular where (pop_date between to_date(TO_CHAR(sysdate, 'YYYYMMDD'),'yyyymmdd') 
		and	to_date(TO_CHAR(sysdate, 'YYYYMMDD'),'yyyymmdd')+1) and connum = #{connum}
	</select>
	<!-- 해당 날짜의 새로운 인기글 컬럼이 없는 경우 새로운 레코드 추가 -->
	<insert id ="insert_pop" parameterType="int">
		insert into popular values(sysdate,0,#{connum},0)
	</insert>
	<!-- 인기글 테이블의 조회수 증가 -->
	<update id="update_count" parameterType="int">
		 update popular set pop_count = pop_count + 1 where (pop_date between to_date(TO_CHAR(sysdate, 'YYYYMMDD'),'yyyymmdd') 
		and	to_date(TO_CHAR(sysdate, 'YYYYMMDD'),'yyyymmdd')+1) and connum = #{connum}
	</update>
	<!-- 인기글 테이블의 좋아요 수 증가 -->
	<update id="update_like" parameterType="int">
		 update popular set pop_like = pop_like + 1 where (pop_date between to_date(TO_CHAR(sysdate, 'YYYYMMDD'),'yyyymmdd') 
		and	to_date(TO_CHAR(sysdate, 'YYYYMMDD'),'yyyymmdd')+1) and connum = #{connum}
	</update>
	<!-- 인기글 테이블의 좋아요 수 감소 -->
	<update id="update_likedown" parameterType="int">
		 update popular set pop_like = pop_like - 1 where (pop_date between to_date(TO_CHAR(sysdate, 'YYYYMMDD'),'yyyymmdd') 
		and	to_date(TO_CHAR(sysdate, 'YYYYMMDD'),'yyyymmdd')+1) and connum = #{connum}
	</update>
	<select id="getpopularcontent" resultType="spring.model.ContentCommand">
select connum,content,conhash,CONCREATEDDATE,conip,conreportcount,conblind,email,connickname,conlike from(
select rownum as rn,connum,content,conhash,CONCREATEDDATE,conip,conreportcount,conblind,email,connickname,conlike from contents, 
(select connum as connum1, mycol  from
(select connum,sum(pop_count) ,sum(pop_like), pop_like, pop_count, mycol  from (
select rownum as rn, connum,pop_count,pop_like,(pop_count+ (pop_like*10)) as mycol from popular where pop_date between to_date(TO_CHAR(sysdate, 'YYYYMMDD'),'yyyymmdd')-3 
and	to_date(TO_CHAR(sysdate, 'YYYYMMDD'),'yyyymmdd')+4 )
group by connum,pop_like,pop_count,mycol) order by (pop_count+ (pop_like*10)) desc) where connum = connum1) where rn between 1 and 10
	</select>
		
	<select id ="hashLike" parameterType= "spring.model.ContentCommand" resultType="spring.model.ContentCommand">
		select * from contents where conhash like '%' || #{conhash} || '%' order by conmodifieddate desc
	</select>


</mapper>



